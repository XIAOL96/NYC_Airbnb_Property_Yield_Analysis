rm(list = ls())
setwd('~/Downloads')
library(readr)
library(dplyr)
require(dplyr)
library(ggplot2)

# read data

nyc_listings = read.csv('nyc_listings.csv', sep = ",", na.strings = c("", "NA", "N/A")) #7,072*96

### preprocessing 

# nyc_listings


nyc_listings = nyc_listings[,-c(grep('url', colnames(nyc_listings)))] #remove all url

for (x in c(which(colnames(nyc_listings) %in% c("price", "weekly_price", "monthly_price", "security_deposit", "cleaning_fee", 
                                               "extra_people")))){
  nyc_listings[,x] = as.numeric(gsub("\\$|,", "", nyc_listings[,x]))}

for (y in c(which(colnames(nyc_listings) %in% c("host_since", "first_review", "last_review")))){
  nyc_listings[,y] = as.Date(nyc_listings[,y])}

nyc_listings$host_response_rate = as.numeric(gsub("%", "", nyc_listings$host_response_rate))/100


nyc_listings = nyc_listings %>% dplyr::select(-c(scrape_id, last_scraped,calendar_last_scraped))  # remove scrape info

# not useful 
nyc_listings$jurisdiction_names = NULL
nyc_listings$license = NULL
# no variance
nyc_listings$experiences_offered = NULL


# remove cols which have more than 80% missing values
nyc_listings = nyc_listings %>% dplyr::select(-which(colSums(is.na(nyc_listings))/dim(nyc_listings)[1] > 0.8)) 



# make sure they are highly available 
nyc_listings = nyc_listings[which(nyc_listings$availability_365 > 60),]     #25427 obs

nyc_listings$average_length_of_stay = ifelse(nyc_listings$minimum_nights > 6.4,
                                            nyc_listings$minimum_nights,
                                            6.4)

nyc_listings$minimum_nights = NULL

nyc_listings$yield = nyc_listings$average_length_of_stay * 
  nyc_listings$price * 
  nyc_listings$reviews_per_month / 0.5 * 12 

 
nyc_listings = nyc_listings[-which(is.na(nyc_listings$yield)),]  #21044
 

nyc_reg_listings = nyc_listings %>% dplyr::select(-c(name, summary, space, 
                                            neighborhood_overview, notes, 
                                            transit, access, interaction,
                                            house_rules, host_id, host_name, host_about, 
                                            host_neighbourhood,host_listings_count, host_total_listings_count,
                                            host_has_profile_pic, 
                                            neighbourhood, city, zipcode, market, 
                                            smart_location, is_location_exact,
                                            maximum_nights, has_availability, availability_30, availability_60,
                                            availability_90, availability_365, calculated_host_listings_count,
                                            host_location,host_response_time,host_response_rate,
                                            review_scores_accuracy,review_scores_cleanliness,review_scores_checkin,
                                            review_scores_communication, review_scores_location,review_scores_value
))

summary(is.na(nyc_reg_listings))
nyc_reg_listings = nyc_reg_listings[-which(is.na(nyc_reg_listings$description)),]
nyc_reg_listings$review_scores_rating = ifelse(is.na(nyc_reg_listings$review_scores_rating), 
                                               median(nyc_reg_listings$review_scores_rating, na.rm = T),  
                                               nyc_reg_listings$review_scores_rating)

nyc_reg_listings = nyc_reg_listings[-which(is.na(nyc_reg_listings$host_since)),]
nyc_reg_listings = nyc_reg_listings[-which(is.na(nyc_reg_listings$host_is_superhost)),]
nyc_reg_listings = nyc_reg_listings[-which(is.na(nyc_reg_listings$host_identity_verified)),]

nyc_reg_listings$state = NULL


nyc_reg_listings$bathrooms = ifelse(is.na(nyc_reg_listings$bathrooms), 
                                   median(nyc_reg_listings$bathrooms, na.rm = T),  
                                   nyc_reg_listings$bathrooms )

nyc_reg_listings$bedrooms = ifelse(is.na(nyc_reg_listings$bedrooms), 
                                  median(nyc_reg_listings$bedrooms, na.rm = T),  
                                  nyc_reg_listings$bedrooms)

nyc_reg_listings$beds = ifelse(is.na(nyc_reg_listings$beds), 
                              median(nyc_reg_listings$beds, na.rm = T),  
                              nyc_reg_listings$beds )



nyc_reg_listings$security_deposit= ifelse(is.na(nyc_reg_listings$security_deposit), 
                                         median(nyc_reg_listings$security_deposit, na.rm = T),  
                                         nyc_reg_listings$security_deposit)


nyc_reg_listings$cleaning_fee= ifelse(is.na(nyc_reg_listings$cleaning_fee), 
                                     median(nyc_reg_listings$cleaning_fee, na.rm = T),  
                                     nyc_reg_listings$cleaning_fee)

nyc_reg_listings = nyc_reg_listings %>% dplyr::select(-c(price, average_length_of_stay, reviews_per_month))

nyc_reg_listings$host_verifications = NULL
nyc_reg_listings$street = NULL
nyc_reg_listings$calendar_updated = NULL
nyc_reg_listings$is_business_travel_ready = NULL
nyc_reg_listings$neighbourhood_cleansed = NULL  #already have longitude and latitude


# code property_type
levels(nyc_reg_listings$property_type)[which(levels(nyc_reg_listings$property_type) == 'Serviced apartment')] = 'Apartment'
levels(nyc_reg_listings$property_type)[which(!levels(nyc_reg_listings$property_type) %in% c("Apartment", "Condominium", "Loft",
                                                                                          "House","Townhouse"))] = 'Others'

nyc_reg_listings$country = NULL
nyc_reg_listings$country_code = NULL
nyc_reg_listings$requires_license = NULL


# fit a linear regression model
lr = lm(yield ~. , data = nyc_reg_listings[,-c(1,2,18)])
summary(lr)

n = dim(nyc_reg_listings)[1] 
# number of parameters
p = dim(nyc_reg_listings[,-c(1,2,18)])[2]

# get t-statistic
jack = rstudent(lr)
nyc_reg_listings = nyc_reg_listings[-which(abs(jack) > abs(qt(.05/(2*n), n-p-1))),]


# get cook's distance
cook = cooks.distance(lr)
# makes a half-normal plot to show cook's distance
faraway::halfnorm(cook, labs=row.names(nyc_reg_listings[,-c(1,2,15)]), ylab="Cook's distances")
# no influential points found


#refit linear regression
lr1 = lm(yield ~. , data = nyc_reg_listings[,-c(1,2,18)])
summary(lr1)

#stepwise selection
library(MASS)    
step.model <- stepAIC(lr1, direction = "both", 
                      trace = FALSE)
summary(step.model)
