rm(list = ls())
setwd('~/Downloads')
library(readr)
library(dplyr)
require(dplyr)
library(ggplot2)

# read data

nyc_listings = read.csv('listings.csv', sep = ",", na.strings = c("", "NA", "N/A")) #49056*96

### preprocessing 

cols_to_keep = c(
  'description', 
  'property_type', 'room_type', 'accommodates',
  'bathrooms', 'bedrooms', 'beds', 'square_feet',
  'price', 'cleaning_fee', 'guests_included', 'extra_people', 'minimum_nights',
  'availability_365', 'reviews_per_month', 'latitude', 'longitude', 'bed_type',
  'amenities')

nyc_listings = nyc_listings[cols_to_keep]

for (x in c(which(colnames(nyc_listings) %in% c("price", "cleaning_fee", 
                                                "extra_people")))){
  nyc_listings[,x] = as.numeric(gsub("\\$|,", "", nyc_listings[,x]))}


# remove cols which have more than 80% missing values
nyc_listings = nyc_listings %>% dplyr::select(-which(colSums(is.na(nyc_listings))/dim(nyc_listings)[1] > 0.8)) 

# make sure they are highly available 
nyc_listings = nyc_listings[which(nyc_listings$availability_365 > 60),]     #25427 obs

nyc_listings$average_length_of_stay = ifelse(nyc_listings$minimum_nights > 6.4,
                                             nyc_listings$minimum_nights,
                                             6.4)

nyc_listings$minimum_nights = NULL

nyc_listings$yield = nyc_listings$average_length_of_stay * 
  nyc_listings$price * 
  nyc_listings$reviews_per_month / 0.5 * 12 

nyc_listings = nyc_listings[-which(is.na(nyc_listings$yield)),]  #21044

summary(is.na(nyc_listings))

nyc_listings = nyc_listings[-which(is.na(nyc_listings$description)),] #20891


nyc_listings$bathrooms = ifelse(is.na(nyc_listings$bathrooms), 
                                median(nyc_listings$bathrooms, na.rm = T),  
                                nyc_listings$bathrooms )

nyc_listings$bedrooms = ifelse(is.na(nyc_listings$bedrooms), 
                               median(nyc_listings$bedrooms, na.rm = T),  
                               nyc_listings$bedrooms)
nyc_listings$beds = ifelse(is.na(nyc_listings$beds), 
                              median(nyc_listings$beds, na.rm = T),  
                              nyc_listings$beds)

nyc_listings$cleaning_fee= ifelse(is.na(nyc_listings$cleaning_fee), 
                                  median(nyc_listings$cleaning_fee, na.rm = T),  
                                  nyc_listings$cleaning_fee)

nyc_listings = nyc_listings %>% dplyr::select(-c(price, average_length_of_stay, reviews_per_month))
summary(is.na(nyc_listings))

# code property_type
levels(nyc_listings$property_type)[which(levels(nyc_listings$property_type) == 'Serviced apartment')] = 'Apartment'
levels(nyc_listings$property_type)[which(!levels(nyc_listings$property_type) %in% c("Apartment", "Condominium", "Loft",
                                                                                    "House","Townhouse"))] = 'Others'

nyc_listings = nyc_listings[which(nyc_listings$yield != 0),]    #20877

 
# fit a linear regression model


lr = lm(yield ~. , data = nyc_listings[,-c(1,15)])
summary(lr)     # R方 0.1347 

                                     
n = dim(nyc_listings)[1] 
# number of parameters
p = dim(nyc_listings)[2] - 2

# get t-statistic
jack = rstudent(lr)
nyc_listings = nyc_listings[-which(abs(jack) > abs(qt(.05/(2*n), n-p-1))),]   #20815

# get cook's distance
cook = cooks.distance(lr)
# makes a half-normal plot to show cook's distance
faraway::halfnorm(cook, labs=row.names(nyc_listings[,-c(1,15)]), ylab="Cook's distances")
# no influential points found

#refit linear regression
colnames(nyc_listings)
lr1 = lm(yield ~. , data = nyc_listings[,-c(1,15)])
summary(lr1)    # R方 0.2605 

#stepwise selection
library(MASS)    
step.model <- stepAIC(lr1, direction = "both", 
                      trace = FALSE)
summary(step.model)

nyc_desc = nyc_listings[,1]
write.csv(nyc_desc, 'nyc_desc.csv')

new_nyc_df = read.csv("new_nyc_df.csv", header = F)

nyc_listings = nyc_listings %>% mutate('desc_topic' = new_nyc_df[,2])
nyc_listings$desc_topic = as.factor(nyc_listings$desc_topic)

lr2 = lm(yield ~. , data = nyc_listings[,-c(1,15)])
summary(lr2)   #R方 0.2651 

###############
new_nyc_df2 = read.csv("new_nyc_df2.csv", header = F)
nyc_listings = nyc_listings %>% mutate('desc_topic2' = new_nyc_df2[,2])
nyc_listings$desc_topic2 = as.factor(nyc_listings$desc_topic2)


lr3 = lm(yield ~. , data = nyc_listings[,-c(1,15,17)]) #两种分类，R方 = 0.2606，不如三种分类 0.2651 

#nyc_ame = write.csv(nyc_listings[,15], 'nyc_amenities.csv')


# adding amenities categories
ame = nyc_listings$amenities
nyc_listings$TV <- ifelse(grepl("TV",ame, ignore.case = T)==T,1,0)
nyc_listings$Internet <- ifelse(grepl("Internet",ame, ignore.case= T)==T,1,0)
nyc_listings$AirCondition <- ifelse(grepl("conditioning",ame, ignore.case =T)==T,1,0)
nyc_listings$Pets <- ifelse(grepl("Pet",ame, ignore.case = T)==T,1,0)
nyc_listings$Pets <- ifelse(grepl("Dog",ame, ignore.case = T)==T,1,nyc_listings$Pets)
nyc_listings$Pets <- ifelse(grepl("Cat",ame, ignore.case = T)==T,1,nyc_listings$Pets)
nyc_listings$Pets <- ifelse(grepl("Pets",ame, ignore.case = T)==T,1,nyc_listings$Pets)
nyc_listings$Kitchen <- ifelse(grepl("Kitchen",ame, ignore.case = T)==T,1,0)
nyc_listings$Breakfast <- ifelse(grepl("breakfast",ame, ignore.case = T)==T,1,0)

lr4 = lm(yield ~. , data = nyc_listings[,-c(1,15,18)])


# test-train split
rmse = function(actual, predicted) {
  sqrt(mean((actual - predicted) ^ 2))
}


nyc_listings$availability_365 = NULL

library(caret)
set.seed(12345)
idx = createDataPartition(nyc_listings$yield, p = 0.80, list = FALSE)

trn = nyc_listings[idx, -c(1,14,16,17,18,19,20,21,22,23)]
tst = nyc_listings[-idx, -c(1,14,16,17,18,19,20,21,22,23)]

new_trn = nyc_listings[idx, -c(1,17,14)]
new_tst = nyc_listings[-idx, -c(1,17,14)]

model_form = formula(yield ~ .)

# lm

lm = lm(yield ~., data = trn)
pred = predict(lm, newdata = tst)
lm_rmse = rmse(tst$yield,pred)   #48351


new_lm = lm(yield ~., data = new_trn)
new_pred = predict(new_lm, newdata = new_tst)
new_lm_rmse = rmse(new_tst$yield,new_pred)   #47618


# rf 

rf = train(model_form, data = trn, method = "rf")
pred = predict(lm, newdata = tst)
rf_rmse = rmse(tst$yield,pred)   #


new_rf = train(model_form, data = new_trn, method = "rf")
new_pred = predict(new_lm, newdata = new_tst)
new_rf_rmse = rmse(new_tst$yield,new_pred)   #


